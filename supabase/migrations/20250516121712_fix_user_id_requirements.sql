/*
  # Fix User ID Requirement for Product Tables
  
  This migration modifies the product tables to make the user_id field nullable
  or add it where missing, allowing CSV imports without user_id values.
*/

-- First drop the existing tables with dependencies
DROP TABLE IF EXISTS product_questions;
DROP TABLE IF EXISTS product_types;

-- Add user_id column to product_categories table
ALTER TABLE product_categories
ADD COLUMN IF NOT EXISTS user_id uuid REFERENCES auth.users(id) NULL;

-- Update RLS policies for product_categories table
DROP POLICY IF EXISTS "Users can view product categories" ON product_categories;

-- Select policy for product_categories table
CREATE POLICY "Users can view product categories"
  ON product_categories
  FOR SELECT
  TO authenticated
  USING (deleted_at IS NULL);

-- Insert policy for product_categories table
CREATE POLICY "Users can create product categories"
  ON product_categories
  FOR INSERT
  TO authenticated
  WITH CHECK (true);

-- Update policy for product_categories table
CREATE POLICY "Users can update product categories"
  ON product_categories
  FOR UPDATE
  TO authenticated
  USING ((user_id = auth.uid()) OR (user_id IS NULL));

-- Delete policy for product_categories table
CREATE POLICY "Users can delete product categories"
  ON product_categories
  FOR DELETE
  TO authenticated
  USING ((user_id = auth.uid()) OR (user_id IS NULL));

-- Recreate product_types table with nullable user_id
CREATE TABLE IF NOT EXISTS product_types (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    product text NOT NULL,
    description text,
    category_id bigint REFERENCES product_categories(id) NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    deleted_at timestamp with time zone DEFAULT null,
    user_id uuid REFERENCES auth.users(id) NULL -- Changed from NOT NULL to NULL
);

-- Enable RLS for product_types table
ALTER TABLE product_types ENABLE ROW LEVEL SECURITY;

-- Select policy for product_types table
CREATE POLICY "Users can view product types"
  ON product_types
  FOR SELECT
  TO authenticated
  USING (deleted_at IS NULL);

-- Insert policy for product_types table - adjusted for nullable user_id
CREATE POLICY "Users can create product types"
  ON product_types
  FOR INSERT
  TO authenticated
  WITH CHECK (true);

-- Update policy for product_types table - adjusted for nullable user_id
CREATE POLICY "Users can update their own product types"
  ON product_types
  FOR UPDATE
  TO authenticated
  USING ((user_id = auth.uid()) OR (user_id IS NULL));

-- Delete policy for product_types table - adjusted for nullable user_id
CREATE POLICY "Users can delete their own product types"
  ON product_types
  FOR DELETE
  TO authenticated
  USING ((user_id = auth.uid()) OR (user_id IS NULL));

-- Recreate product_questions table with nullable user_id
CREATE TABLE IF NOT EXISTS product_questions (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    question text NOT NULL,
    question_description text,
    question_id text,
    category_id bigint REFERENCES product_categories(id) NOT NULL,
    product_id bigint REFERENCES product_types(id) NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    deleted_at timestamp with time zone DEFAULT null,
    user_id uuid REFERENCES auth.users(id) NULL -- Changed from NOT NULL to NULL
);

-- Enable RLS for product_questions table
ALTER TABLE product_questions ENABLE ROW LEVEL SECURITY;

-- Select policy for product_questions table
CREATE POLICY "Users can view product questions"
  ON product_questions
  FOR SELECT
  TO authenticated
  USING (deleted_at IS NULL);

-- Insert policy for product_questions table - adjusted for nullable user_id
CREATE POLICY "Users can create product questions"
  ON product_questions
  FOR INSERT
  TO authenticated
  WITH CHECK (true);

-- Update policy for product_questions table - adjusted for nullable user_id
CREATE POLICY "Users can update product questions"
  ON product_questions
  FOR UPDATE
  TO authenticated
  USING ((user_id = auth.uid()) OR (user_id IS NULL));

-- Delete policy for product_questions table - adjusted for nullable user_id
CREATE POLICY "Users can delete product questions"
  ON product_questions
  FOR DELETE
  TO authenticated
  USING ((user_id = auth.uid()) OR (user_id IS NULL));

-- Grant access permissions to product tables for authenticated users
GRANT SELECT, INSERT, UPDATE, DELETE ON product_types TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON product_questions TO authenticated; 