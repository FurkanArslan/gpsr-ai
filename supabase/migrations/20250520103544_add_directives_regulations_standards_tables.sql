-- Create directives table
CREATE TABLE IF NOT EXISTS public.directives (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    directive_number TEXT NOT NULL,
    directive_name TEXT NOT NULL,
    directive_description TEXT,
    directive_edition_date TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    deleted_at TIMESTAMPTZ,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NULL
);

-- Create regulations table
CREATE TABLE IF NOT EXISTS public.regulations (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    regulation_number TEXT NOT NULL,
    regulation_name TEXT NOT NULL,
    regulation_description TEXT,
    regulation_edition_date TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    deleted_at TIMESTAMPTZ,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NULL
);

-- Create standards table
CREATE TABLE IF NOT EXISTS public.standards (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    ref_no TEXT NOT NULL,
    edition TEXT,
    title TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    deleted_at TIMESTAMPTZ,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NULL
);

-- Add RLS policies for directives
ALTER TABLE public.directives ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own directives"
    ON public.directives
    FOR SELECT
    USING (auth.uid() = user_id OR user_id IS NULL);

CREATE POLICY "Users can insert their own directives"
    ON public.directives
    FOR INSERT
    WITH CHECK (auth.uid() = user_id OR user_id IS NULL);

CREATE POLICY "Users can update their own directives"
    ON public.directives
    FOR UPDATE
    USING (auth.uid() = user_id OR user_id IS NULL)
    WITH CHECK (auth.uid() = user_id OR user_id IS NULL);

CREATE POLICY "Users can delete their own directives"
    ON public.directives
    FOR DELETE
    USING (auth.uid() = user_id OR user_id IS NULL);

-- Add RLS policies for regulations
ALTER TABLE public.regulations ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own regulations"
    ON public.regulations
    FOR SELECT
    USING (auth.uid() = user_id OR user_id IS NULL);

CREATE POLICY "Users can insert their own regulations"
    ON public.regulations
    FOR INSERT
    WITH CHECK (auth.uid() = user_id OR user_id IS NULL);

CREATE POLICY "Users can update their own regulations"
    ON public.regulations
    FOR UPDATE
    USING (auth.uid() = user_id OR user_id IS NULL)
    WITH CHECK (auth.uid() = user_id OR user_id IS NULL);

CREATE POLICY "Users can delete their own regulations"
    ON public.regulations
    FOR DELETE
    USING (auth.uid() = user_id OR user_id IS NULL);

-- Add RLS policies for standards
ALTER TABLE public.standards ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own standards"
    ON public.standards
    FOR SELECT
    USING (auth.uid() = user_id OR user_id IS NULL);

CREATE POLICY "Users can insert their own standards"
    ON public.standards
    FOR INSERT
    WITH CHECK (auth.uid() = user_id OR user_id IS NULL);

CREATE POLICY "Users can update their own standards"
    ON public.standards
    FOR UPDATE
    USING (auth.uid() = user_id OR user_id IS NULL)
    WITH CHECK (auth.uid() = user_id OR user_id IS NULL);

CREATE POLICY "Users can delete their own standards"
    ON public.standards
    FOR DELETE
    USING (auth.uid() = user_id OR user_id IS NULL);
